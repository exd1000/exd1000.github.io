---
import Layout from '../layouts/Layout.astro';
---

                                                                

<Layout>
<main class="fixed inset-0 overflow-hidden text-white font-mono">
        
  <div class="absolute inset-0 bg-black z-0"></div>
  <canvas id="connections" class="absolute top-0 left-0 z-0 pointer-events-none"></canvas>



  <!-- 
███████ ██   ██  ██████ ██    ██ ███████ ███████     ███    ███ ███████ 
██       ██ ██  ██      ██    ██ ██      ██          ████  ████ ██      
█████     ███   ██      ██    ██ ███████ █████       ██ ████ ██ █████   
██       ██ ██  ██      ██    ██      ██ ██          ██  ██  ██ ██      
███████ ██   ██  ██████  ██████  ███████ ███████     ██      ██ ███████ 
                                                                        


Can I have some privacy please? 
-->

  <div id="memory-space" class="fixed inset-0 z-10">
    <a href="https://exd1000.substack.com" target="_blank" class="node"><em>Substack</em></a>
    <a href="https://github.com/exd1000" target="_blank" class="node"><em>GitHub</em></a>
    <a href="/blank" class="node">My Default Node</a>
    <a href="/benji" class="node">♥︎ Benjison ♥︎</a>
    <a href="/about" class="node">Who Am I?</a>
    <a href="javascript:cv(0);" id="secret-node" class="node">Curriculum Vitae</a>
    <a href="/thoughts" class="node">3AM Thoughts</a>
    <a href="/research" class="node">Research Focus</a> 
    <a href="/contact" class="node">Contact Me</a> 
    <a href="/why" class="node">Why This Matters</a>  
    <!-- <a href="https://contra.com/emilydinh" target="_blank" class="node"><em>Contra</em></a> -->
  </div>
    


  <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-20">  <h1 class="text-2xl md:text-4xl animate-fade-in-slow text-center text-white">
    Which Memory Node Would You Like to Access?
  </h1>
  </div>




  <div id="password-modal" class="hidden fixed inset-0 bg-black/70 flex items-center justify-center z-50">
    <div class="bg-white text-black rounded-xl p-8 shadow-lg flex flex-col gap-4 max-w-sm w-full text-center">
      <h2 class="text-lg font-bold">Memory Access Required</h2>
      <input id="password-input" type="password" placeholder="Enter authorization key" class="border p-2 rounded-md w-full" />
      <div class="flex justify-center gap-4">
        <button id="password-submit" class="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-400">
          Unlock Memory
        </button>
        <button onclick="window.location.href='/contact'" class="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-400">
          Request Access
        </button>
        <button id="password-cancel" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-400">
          Cancel
        </button>
      </div>
    </div>
  </div>


  <div id="memory-failed" class="hidden fixed inset-0 bg-black flex items-center justify-center z-50">
    <div class="glitch-text text-2xl animate-glitch">Memory Retrieval Failed</div>
  </div>


  <style>
    .node {
      position: absolute;
      padding: 0.75rem 1.5rem;
      border-radius: 9999px;
      background: #6b21a8;
      transition: all 0.3s;
      animation: pulse 2s infinite;
      animation-delay: calc(var(--random-delay) * 1s);
      box-shadow: 0 0 10px #a855f7;
      font-weight: bold;
      font-family: monospace;
      pointer-events: auto;
      text-align: center;
    }


    #memory-space a:nth-child(1) { --random-delay: 0.2; } /*Substack*/
    #memory-space a:nth-child(2) { --random-delay: 1.4; } /*GitHub */
    #memory-space a:nth-child(3) { --random-delay: 0.7; } /* Elevator*/
    #memory-space a:nth-child(4) { --random-delay: 1.0; } /* Benji*/
    #memory-space a:nth-child(5) { --random-delay: 0.5; } /*About me*/
    #memory-space a:nth-child(6) { --random-delay: 1.8; } /* CV*/
    #memory-space a:nth-child(7) { --random-delay: 0.3; }/* 3am*/
    #memory-space a:nth-child(8) { --random-delay: 1.2; } /* Research Focus */
    #memory-space a:nth-child(9) { --random-delay: 0.6; } /* Contact Me */
    #memory-space a:nth-child(10) { --random-delay: 0.9; } /* Why This Matters */
    /* #memory-space a:nth-child(11) { --random-delay: 1.1; }  Contra */ 


    .node:hover {
      transform: scale(1.05);
      background: #9333ea;
    }





    #memory-space a:nth-child(1) { top: 20%; left: 15%; background-color: #9275a9; } /* Substack */
    #memory-space a:nth-child(2) { top: 70%; left: 75%; background-color: #93bec1; } /* GitHub */
    #memory-space a:nth-child(3) { top: 5%; left: 40%; background-color: #cec6de; } /* Elevator Music */
    #memory-space a:nth-child(4) { top: 75%; left: 20%; background-color: #c5b37c; } /* Benji */
    #memory-space a:nth-child(5) { top: 40%; left: 5%; background-color: #b36d69; } /* Who am I */
    #memory-space a:nth-child(6) { top: 35%; left: 80%; background-color: #c87da3; } /* CV */
    #memory-space a:nth-child(7) { top: 85%; left: 50%; background-color: #4f596e; } /* 3AM Thoughts */
    #memory-space a:nth-child(8) { top: 60%; left: 30%; background-color: #79b6a2; } /* Research Focus */
    #memory-space a:nth-child(9) { top:15%; left:75%; background-color: #758caf; } /* Contact */
    #memory-space a:nth-child(10) { top: 25%; left: 50%; background-color: #9893da; } /* My Why*/
    /*  #memory-space a:nth-child(11) { top: 35%; left: 35%; background-color: #e6ad70; } Contra */

    .glitch-text {
      color: white;
      font-family: monospace;
      text-shadow: 1px 1px #ff00ff, -1px -1px #00ffff;
    }

    @keyframes glitch {
      0%, 100% { transform: translate(0); opacity: 1; }
      20% { transform: translate(-2px, 2px); opacity: 0.8; }
      40% { transform: translate(2px, -1px); opacity: 0.9; }
      60% { transform: translate(-1px, 1px); opacity: 0.85; }
      80% { transform: translate(1px, -2px); opacity: 0.95; }
    }

    .animate-glitch {
      animation: glitch 1s infinite;
    }


    .animate-fade-in-slow {
      opacity: 0;
      transform: translateY(20px);
      animation: floatFade 2.2s ease forwards;
    }

    @keyframes floatFade {
      to {
        opacity: 0.65; 
        transform: translateY(0);
      }
    }

  </style>


  <script>
    let targetPage = '';

    document.addEventListener('DOMContentLoaded', () => {
      const secretNode = document.getElementById('secret-node');
      const submitButton = document.getElementById('password-submit');
      const cancelButton = document.getElementById('password-cancel');

      secretNode.addEventListener('click', (e) => {
        e.preventDefault();
        openPasswordModal('/cv');
      });

      submitButton.addEventListener('click', submitPassword);
      cancelButton.addEventListener('click', closePasswordModal);
    });

    function openPasswordModal(page) {
      targetPage = page;
      document.getElementById('password-modal').classList.remove('hidden');
      document.getElementById('password-input').value = '';
      document.getElementById('password-input').focus();
    }

    function closePasswordModal() {
      document.getElementById('password-modal').classList.add('hidden');
    }

    function submitPassword() {
      const input = document.getElementById('password-input').value;
      const correctPassword = "luckyyou"; 

      if (input === correctPassword) {
        history.replaceState(null, '', '/'); 
        history.pushState(null, '', '/cv');  
window.location.href = '/cv';
      } else {
        closePasswordModal();
        triggerMemoryFailed();
      }
    }

    function triggerMemoryFailed() {
      const failed = document.getElementById('memory-failed');
      failed.classList.remove('hidden');
      setTimeout(() => {
        failed.classList.add('hidden');
      }, 700);
    }

    // Canvas connections - this had a lot of issues
    const canvas = document.getElementById('connections');
    const ctx = canvas.getContext('2d');

    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();

    const nodes = Array.from(document.querySelectorAll('#memory-space a'));
    let mouseX = null;
    let mouseY = null;

    document.addEventListener('mousemove', (e) => {
      mouseX = e.clientX;
      mouseY = e.clientY;
    });

    const particles = Array.from({ length: 120 }, () => ({
      x: Math.random() * window.innerWidth,
      y: Math.random() * window.innerHeight,
      radius: Math.random() * 2 + 0.5,
      dx: (Math.random() - 0.5) * 0.4,
      dy: (Math.random() - 0.5) * 0.4,
    }));

    function updateParticles() {
      for (let p of particles) {
        p.x += p.dx;
        p.y += p.dy;
        if (p.x < 0 || p.x > window.innerWidth) p.dx *= -1;
        if (p.y < 0 || p.y > window.innerHeight) p.dy *= -1;
      }
    }

    function drawParticles() {
      for (let p of particles) {
        ctx.beginPath();
        ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
        ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
        ctx.fill();
      }
    }

    function getNodeCenters() {
      return nodes.map(node => {
        const rect = node.getBoundingClientRect();
        return {
          x: rect.left + rect.width / 2 + window.scrollX,
          y: rect.top + rect.height / 2 + window.scrollY
        };
      });
    }

    function drawLines() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawParticles();

      const centers = getNodeCenters();

      for (let i = 0; i < centers.length; i++) {
        for (let j = i + 1; j < centers.length; j++) {
          const dist = Math.hypot(centers[i].x - centers[j].x, centers[i].y - centers[j].y);
          if (dist < 600) {
            const hover = mouseX && mouseY &&
              (Math.hypot(mouseX - centers[i].x, mouseY - centers[i].y) < 80 ||
              Math.hypot(mouseX - centers[j].x, mouseY - centers[j].y) < 80);

            ctx.strokeStyle = hover
              ? 'rgba(255, 255, 255, 0.8)'
              : 'rgba(168, 85, 247, 0.4)';
            ctx.lineWidth = hover ? 2.5 : 1.5;
            ctx.beginPath();
            ctx.moveTo(centers[i].x, centers[i].y);
            ctx.lineTo(centers[j].x, centers[j].y);
            ctx.stroke();
          }
        }
      }
    }

    function animate() {
      requestAnimationFrame(animate);
      updateParticles();
      drawLines();
    }

    animate();

  (function watchDevTools() {
    const messages = [
      "👁 That wasn't very subtle.",
      "🔒 Accessing inner thoughts? Cute.",
      "🤫 Nosy much?"
    ];

    let devtoolsOpen = false;

    setInterval(() => {
      const widthThreshold = window.outerWidth - window.innerWidth > 160;
      const heightThreshold = window.outerHeight - window.innerHeight > 160;
      const isOpen = widthThreshold || heightThreshold;

      if (isOpen && !devtoolsOpen) {
        devtoolsOpen = true;
        const randomMessage = messages[Math.floor(Math.random() * messages.length)];
        alert(randomMessage);
      }

      if (!isOpen && devtoolsOpen) {
        devtoolsOpen = false;
      }
    }, 1000);
  })();



  

  console.log(
    "%cA memory once sealed cannot be retrieved. ✨\n\nBut some memories... they leak.\nTry typing: unlock('exd1000')",
    "color: #9d7edb; font-size: 12px; font-family: monospace;"
  );

  window.unlock = function(key) {
    if (key === 'exd1000') {
      alert("Key sequence accepted 🔓.\n\nAccess granted to an encrypted memory.");
      history.replaceState({ trapRoot: true }, '', '/void');
      location.replace('/void');
    } else {
      alert("Unrecognized fragment.");
    }
  };
  </script>


</main>
</Layout>
