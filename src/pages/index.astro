---
import Layout from '../layouts/Layout.astro';
import SubstackFeed from '../components/SubstackFeed.astro';
---


<Layout>
  <div id="particles-js" class="fixed inset-0 -z-10 w-full h-full"></div>
  <main class="min-h-screen flex flex-col items-center justify-center text-center relative"> 

      <!-- portral breathing -->
      <div class="breathing-portal">
          <div class="relative w-32 h-32 mb-8">

            <!-- stardust canvas -->
            <canvas id="portal-canvas" class="absolute inset-0 w-full h-full rounded-full overflow-hidden pointer-events-none"></canvas>
            
            <!-- glow -->
            <div id="halo" class="absolute inset-0 rounded-full bg-purple-400 opacity-0 blur-2xl transition-opacity duration-300 pointer-events-none"></div>
            
            <!-- purple ring -->
            <div class="w-full h-full border-4 border-purple-600 rounded-full animate-pulse"></div>
          </div>
      </div>



    <!-- Welcome -->
    <h1 class="text-3xl md:text-5xl font-mono mt-8 text-white mb-8 z-10">
      Welcome <span id="user-id" class="italic text-purple-400 typing"></span>
    </h1>

    <script>
      const randomNum = Math.floor(Math.random() * 9000) + 1000;
      document.getElementById('user-id').innerText = `User-${randomNum}`;
    </script>



    <p class="text-lg md:text-l text-gray-400 z-10 italic animate-fade-in delay-200">
      You are in the mind of <span class="text-gray-300 italic">exd1000</span>
    </p>

    <!-- Prompt -->
    <p class="text-red-400 text-sm font-semibold animate-pulse hover:animate-wiggle">
      CAUTION: Would you like to proceed?
    </p>

    <br>
    <!-- Buttons -->
    <div class="flex space-x-6">
      <!-- No button -->
      <button id="no-button" type="button"
        class="px-6 py-3 bg-gray-600 text-white font-bold rounded-full text-lg hover:shadow-lg hover:-translate-y-0.5 transition-all hover:bg-gray-500">
        No
      </button>


      <!-- Yes button -->
      <a id="yes-button" href="/loading" 
        class="px-6 py-3 bg-purple-600 text-white font-bold rounded-full text-lg hover:shadow-lg hover:-translate-y-0.5 transition-all hover:bg-purple-500">
        Yes
      </a>

    </div>

    <!--Yes button void transition-->
    <style>
      .void-transition {
        position: fixed;
        inset: 0;
        background: black;
        z-index: 1000;
        animation: suckIntoVoid 1.2s ease-in-out forwards;
      }

      @keyframes suckIntoVoid {
        0% {
          opacity: 0;
          transform: scale(1);
        }
        50% {
          opacity: 0.7;
          transform: scale(2);
        }
        100% {
          opacity: 1;
          transform: scale(10);
        }
      }
    </style>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const yesButton = document.getElementById('yes-button');
        if (yesButton) {
          yesButton.addEventListener('click', (e) => {
            e.preventDefault();

            const voidOverlay = document.createElement('div');
            voidOverlay.classList.add('void-transition');
            document.body.appendChild(voidOverlay);

            setTimeout(() => {
              window.location.href = "/loading";
            }, 1200); // match animation duration
          });
        }
      });
    </script>

<!-- circle stardust/glow --> 
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const canvas = document.getElementById('portal-canvas');
        const ctx = canvas.getContext('2d');
        const halo = document.getElementById('halo');
        const particles = [];

        function resizeCanvas() {
          canvas.width = canvas.offsetWidth;
          canvas.height = canvas.offsetHeight;
        }

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        function createParticle(x, y) {
          particles.push({
            x,
            y,
            radius: Math.random() * 2 + 0.5,
            opacity: 1,
            dx: (Math.random() - 0.5) * 0.5,
            dy: (Math.random() - 0.5) * 0.5,
          });
        }

        function updateParticles() {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          for (let i = particles.length - 1; i >= 0; i--) {
            const p = particles[i];
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const dx = centerX - p.x;
            const dy = centerY - p.y;
            const dist = Math.sqrt(dx * dx + dy * dy);

            p.x += p.dx + (dx / dist) * 0.1; // gravity pull
            p.y += p.dy + (dy / dist) * 0.1;
            p.opacity -= 0.01;

            if (p.opacity <= 0) {
              particles.splice(i, 1);
              continue;
            }
            ctx.beginPath();
            ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
            ctx.fillStyle = `rgba(255, 255, 255, ${p.opacity})`;
            ctx.fill();
          }
        }

        function animate() {
          requestAnimationFrame(animate);
          updateParticles();
        }
        animate();

        // Track if mouse is inside
        let mouseInside = false;

        canvas.parentElement.addEventListener('mousemove', (e) => {
          const rect = canvas.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;
          const centerX = rect.width / 2;
          const centerY = rect.height / 2;
          const distance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));

          if (distance <= rect.width / 2) {
            if (!mouseInside) {
              halo.classList.add('opacity-20');
              halo.classList.remove('opacity-0');
              mouseInside = true;
            }
            for (let i = 0; i < 2; i++) {
              createParticle(x, y);
            }
          } else {
            if (mouseInside) {
              halo.classList.remove('opacity-20');
              halo.classList.add('opacity-0');
              mouseInside = false;
            }
          }
        });
      });
    </script>

<!-- No button glitch corruption -->
    <script>
    const corruptedMessages = [
      "Memory Corrupted.",
      "Access Violation.",
      "Cognitive Fault Detected.",
      "Node Disconnected.",
      "Memory Fragment Unrecoverable.",
      "Unauthorized Neural Reentry.",
      "Signal Lost.",
      "Memory Leak Error.",
      "You shouldn't have done that.",
      "404: Consciousness Not Found."
    ];

    function triggerCorruption() {
      const randomIndex = Math.floor(Math.random() * corruptedMessages.length);
      const message = corruptedMessages[randomIndex];
      
      document.body.innerHTML = `
        <style>
          @keyframes glitch {
            0% { transform: translate(0); opacity: 1; }
            20% { transform: translate(-2px, 2px); opacity: 0.8; }
            40% { transform: translate(2px, -1px); opacity: 0.9; }
            60% { transform: translate(-1px, 1px); opacity: 0.85; }
            80% { transform: translate(1px, -2px); opacity: 0.95; }
            100% { transform: translate(0); opacity: 1; }
          }
          @keyframes flicker {
            0%, 100% { background-color: black; }
            10% { background-color: #0a0a0a; }
            20% { background-color: black; }
            30% { background-color: #111; }
            40%, 60% { background-color: black; }
            70% { background-color: #1a1a1a; }
            80% { background-color: black; }
            90% { background-color: #0d0d0d; }
          }
          body {
            background-color: black;
            animation: flicker 1.2s infinite;
          }
          .glitch-text {
            color: white;
            font-size: 2rem;
            font-family: monospace;
            animation: glitch 0.5s infinite;
            text-shadow: 1px 1px #ff00ff, -1px -1px #00ffff;
          }
          .glitch-container {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
          }
        </style>

        <div class="glitch-container">
          <div class="glitch-text">${message}</div>
        </div>
      `;
    }

    // Attach no-button click
    document.addEventListener('DOMContentLoaded', () => {
      const noButton = document.getElementById('no-button');
      if (noButton) {
        noButton.addEventListener('click', () => {
          triggerCorruption();
         // Go back to the previous page
        setTimeout(() => {
          window.history.back(); // Go back to the previous page
        }, 2000); // Wait for the glitch 
        });
      }
    });

    // trigger corruption if they use back button
    window.addEventListener('popstate', function () {
      triggerCorruption();
    });

    // Setup fake history so popstate triggers
    document.addEventListener('DOMContentLoaded', function () {
      history.pushState(null, '', location.href);
    });
    </script>


    <!-- particles bg -->
    <script src="https://cdn.jsdelivr.net/npm/tsparticles@2/tsparticles.bundle.min.js"></script>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        tsParticles.load("particles-js", {
          particles: {
            number: { value: 100, density: { enable: true, value_area: 800 } },
            color: { value: "#ffffff" },
            shape: { type: "circle" },
            opacity: { value: 0.5, random: true },
            size: { value: 2.5, random: true },
            links: {
              enable: true,
              distance: 130,
              color: "#ffffff",
              opacity: 0.3,
              width: 1
            },
            move: {
              enable: true,
              speed: 1.2,
              direction: "none",
              random: true,
              straight: false,
              outModes: { default: "bounce" }
            }
          },
          interactivity: {
            events: {
              onHover: { enable: true, mode: "grab" },
              resize: true
            },
            modes: {
              grab: { distance: 140, links: { opacity: 0.5 } }
            }
          },
          detectRetina: true
        });
      });
    </script>

  </main>
</Layout>

